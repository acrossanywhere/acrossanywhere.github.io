<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python迭代器]]></title>
    <url>%2Fpassages%2FPython%E8%BF%AD%E4%BB%A3%E5%99%A8%2F</url>
    <content type="text"><![CDATA[什么是迭代器？ 迭代是Python最强大的功能之一，是访问集合元素的一种方式。 迭代器是一个可以记住遍历的位置的对象。 迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。 迭代器有两个基本的方法：iter() 和 next()。 字符串，列表或元组对象都可用于创建迭代器 迭代器解决了什么问题？ 当读取一个特别文件时，如一个2G日志，假设硬盘IO每秒30M 使用文件的方式读取该文件需要大概一分钟，才能完全将该文件 加载到内存。 通常我们查看日志也就看最新的几行或者几百行。这样一来 打开速度慢。二来太浪费内存,如果文件超级大，可能会卡死 迭代器很好的解决了这个问题。迭代器可以读取一行显示一行 如何定义迭代器，如下:1234567891011names=iter(['A','B','C','D']) #iter关键字生成迭代器#print(names[1]) #直接用索引访问会报错print(names.__next__()) #访问迭代器中的元素print(names.__next__()) #访问迭代器中的元素print(names.__next__()) #访问迭代器中的元素print(names.__next__()) #访问迭代器中的元素print(names.__next__()) #当迭代器中的元素以及访问完，最后会报StopIteration错误` 生成器一个函数调用时返回一个迭代器，这个函数叫做生成器(generator)， 如果函数中包含yield语法，这个函数就会变成生成器]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中使用函数]]></title>
    <url>%2Fpassages%2FPython%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数 你可以定义一个由自己想要功能的函数，以下是简单的规则： 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。 函数内容以冒号起始，并且缩进。 return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。 函数的返回值 1234def fun1(a): a+=1 return a #这里返回a+1的结果print(fun1(5)) 默认参数 1234def show1(a1,a2=999,a3=476): #默认参数必须放最后 print(a1,a2,a3)show1(11, 22)#只传递两个参数，默认参数a3也会打印show1(111,22,333)#给默认参数传递新值，这样会修改默认参数值 指定参数 1234def show2(a1,a2):#默认传参数按顺序来 print(a1,a2)show2(999,123)#不指定参数show2(a2=999,a1=123)#指定参数 动态参数 1 args 用来将参数打包成tuple给函数体调用，参数个数不受限制，args接收元组作为位置参数2 args 将参数打包成字典3 注意点：参数arg、args、kwargs三个参数的位置必须是一定的。必须是(arg,*args,kwargs)这个顺序，否则程序会报错 args 用来将参数打包成tuple给函数体调用，参数个数不受限制，args接收元组作为位置参数123456789#将参数打包成元组def show1(*args): print(args,type(args))show1(1,2,3)#args 将参数打包成字典def show2(**args): print(args,type(args))show2(a=123,b=456,c=789) 结果: (1, 2, 3) &lt;class &apos;tuple&apos;&gt; {&apos;a&apos;: 123, &apos;b&apos;: 456, &apos;c&apos;: 789} &lt;class &apos;dict&apos;&gt; 匿名函数: 当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。 关键字lambda表示匿名函数 匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。 用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是 一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数 1234567891011#普通函数def fun1(a): a+=1 return aprint(fun1(5))#lambda表达式 实现相同的效果fun2=lambda a: a+1 #这里a相当于形参，冒号前面是函数体，冒号后面是函数执行的代码print(fun2(5))]]></content>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python可命名元祖]]></title>
    <url>%2Fpassages%2FPython%E5%8F%AF%E5%91%BD%E5%90%8D%E5%85%83%E7%BB%84%2F</url>
    <content type="text"><![CDATA[直接上代码吧 1234567import collections#可命名元组，即给元组的元素起名字。用名称去访问元组中的元素MytupleCalss=collections.namedtuple(&quot;MytupleCalss&quot;,[&apos;x&apos;,&apos;y&apos;,&apos;z&apos;])obj=MytupleCalss(11,22,33)print(obj.x,obj.y,obj.z)]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python深浅拷贝]]></title>
    <url>%2Fpassages%2Fpython%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[Python当中对于拷贝，分为两种类型。一种是数字和字符串，另一种就是列表、元组、字典等其他类型了 对于字符串，和数字,来说，深拷贝和浅拷贝永远都是用的同一个内存中的值，它们指向的地址是相同的 12345678910111213141516171819202122232425262728n1=&#123;"k1":"1","k2":123,"k3":["len",444]&#125;n2=n1#将n1赋值给n2if (id(n1))==(id(n2)): print("n1的地址和n2相同")else: print("n1的地址和n2不同")n3=copy.copy(n1)#浅拷贝创建新对象。对象只拷原来对象第一层的数据if (id(n3))==(id(n1)): print("n1和n3地址相同")else: print("n1和n3地址不同")print(n1,'\n',n3) #n3 和n1 是两个不同的对象。ID不一样,但指向的值是一样的if (id(n1["k3"]))==(id(n3["k3"])): #测试一下n1和n3指向的数据地址是否一致 print("n1的k3和n3的k3 指向的地址相同")else: print("n1的k3和n3的k3 指向的地址不同")n4=copy.deepcopy(n1)if (id(n4))==(id(n1)): #无论嵌套多少层，深拷贝会完整复制一份新的数据。 print("n4和n1地址相同")else: print("n4和n1地址不同")if (id(n1["k3"]))==(id(n4["k3"])): #测试一下n1和n4指向的数据地址是否一致 print("n1的k3和 n4的k3指向的地址相同")else: print("n1的k3和 n4的k3指向的地址不同") 结果： n1的地址和n2相同 n1和n3地址不同 {&apos;k1&apos;: &apos;1&apos;, &apos;k2&apos;: 123, &apos;k3&apos;: [&apos;len&apos;, 444]} {&apos;k1&apos;: &apos;1&apos;, &apos;k2&apos;: 123, &apos;k3&apos;: [&apos;len&apos;, 444]} n1的k3和n3的k3 指向的地址相同 n4和n1地址不同 n1的k3和 n4的k3指向的地址不同]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python基础语法学习笔记]]></title>
    <url>%2Fpassages%2FPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Python基础语法一句hello World 引出Python3123#!/usr/bin/python3 print("Hello, World!") Python的优点: 简单易学 丰富的库支持和活跃社区 可扩展性高 用途广 Python2与Python3区别: python2 源码不标准，混乱，重复代码太多 python3 统一 标准，去除重复代码 python2 python3 区别：python2默认编码方式是ascii码 解决方式：在文件的首行：#-- encoding:utf-8 -- python3 默认编码方式utf-8 变量与赋值 变量。顾名思义，可以变化的量，计算机把数据都存在内存中 变量其实就是一块内存地址在操作系统中的别名。 123name=&quot;小明&quot;age=21print(name,age) 结果: (&apos;小明&apos;, 21) Python的内存模型:a=3 #a初始值为3 b=a #b指向的是a指向的地址，通俗来说，在内存中有一个地址，里面值是3，在操作系统引用的时候，可以用别名a， 或者别名b来引用 a=5 #修改a以后b的值不会改变 这里我们用python内置函数 id查看变量的内存地址 1234567#!/usr/bin/pythona=3print(&quot;a id &quot;,id(a),a)b=aprint(&quot;b id &quot;,id(b),b)a=5print(&quot;a id &quot;,id(a),a) 结果： (&apos;a id &apos;, 38792248, 3) (&apos;b id &apos;, 38792248, 3) (&apos;a id &apos;, 38792200, 5) 可以看出变量a和变量b是指向同一个地址，别名a指向5，而5又在其他内存区域，所以最后打印a指向的地址发生了变化 Python的数据类型Python支持常用的数值类型： •int（符号整数）：通常被称为是整数或整数，没有小数点的正或负整数。 •float（浮点实际值）：彩车，代表实数，小数除以整数部分和小数部分的书面。花车也可能是在科学记数法与E或指示的10次方é（2.5e2= 2.5×102=250） •string (字符串): •list (列表）：一次性存放多个相同类型的值，类似于C语言中数组 •tuple (元组）：元组与列表类似，不同之处在于元组的元素不能修 •bool (字典）：字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 整型int类型的范围: 32操作系统上:232-1 64操作系统上:264-1 在3.5中init长度理论上是无限的 123456789101112131415161718#int,float类型的一些内部功能age=18.000print(age.__abs__())#求绝对值print(age.__add__(10))#加10print(age.__eq__(19))#对比age是否等于19 返回值为True或者Falseresult=age.__init__()#将age转为int,会生成一个新对象，类型为intprint(type(age),result)#打印转换后结果print(age.__divmod__(4))#返回商和余数age=18#现在把age修改为int类型print(age.bit_length())#显示age二进制有几位,此功能只支持iniprint(age.__abs__())#求绝对值print(age.__add__(10))#加10print(age.__eq__(19))#对比age是否等于19 返回值为True或者Falseresult=age.__float__()#将age转为float,会生成一个新对象，类型为floatprint(type(age),result)#打印转换后结果print(age.__divmod__(4))#返回商和余数 字符串python中字符串本质上字符列表: 字符串操作: 移除空白 strip 分割 split 计算长度 len 索引 index 切片 obj[1:],obj[1:10] 字符串需要注意到地方 万恶的 +号 因为字符数组+一个元素,开辟一块新空间 复制一份数组 把新元素添加进去所以效率低,耗费内存 1234s='string'print(id(s))s2=s+'a'#新开辟一块内存给s2,然后再列表尾部添加字符'a' 当数据量大时，非常占用资源print(id(s2)) 列表 列表拥有的操作方法：append 增加 count 统计 extend 扩展 index 索引 insert 插入 pop 弹出 remove 删除指定元素 reverse 反转 sort 排序 split 切片 123456789101112131415161718list_int=[1,2,3,4,5]name_list=["zhangsan","lisi","wangwu","wangwu"]print(name_list.index("wangwu")) #索引wangwu在哪个位置name_list.append("zhaoliu")#把zhaoliu添加到列表尾部print(name_list)print(name_list.count("zhaoliu"))#统计有几个叫wangwu的name_list.insert(1,"wangdachui") #在索引为1的后面插入一个叫wangdachui的print(name_list)print(name_list.pop()) #弹出当前尾部元素name_list.remove("wangdachui")#删除列表指定元素name_list.remove("wangwu")#列表中的两个wangwu都会被删除print(name_list)name_list.reverse()#反转列表顺序print(name_list)name_list.sort()#按照aissc码进行排序print(name_list)name_list.extend(list_int)#添加另一个列表到name_listprint(name_list) 元组 元祖的操作和列表基本上相同，但是元组是只读的（元祖中的元素不可修改）；元祖的元素的元素可以修改 1234t2=(11,22,&#123;'k1':'1'&#125;)print(t2)t2[2]['k1']='2'print(t2) 结果: (11, 22, {&apos;k1&apos;: &apos;1&apos;}) (11, 22, {&apos;k1&apos;: &apos;2&apos;}) 字典 字典支持的方法:键值对 d[key:&apos;value&apos;] 新增 d[key:&apos;value&apos;] 删除 del d[key] 所有的键 keys 所有的值 values 所有的键值对 items 12345d1=dict(k1='1',k2='2')d2=d1.fromkeys(['k1','k2'],'1')#以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值生成新字典print(d2)print(d1.get('k3','hello'))#get方法，如果k3不存在，则设置k3为 helloprint(d1.items())#打印所有的key和values 结果: {&apos;k1&apos;: &apos;1&apos;, &apos;k2&apos;: &apos;1&apos;} hello dict_items([(&apos;k1&apos;, &apos;1&apos;), (&apos;k2&apos;, &apos;2&apos;)]) 特殊数据对象”集合”集合（set）是一个无序的不重复元素序列 12345678910s1=set()#创建一个集合对象s1.add(&apos;1&apos;)s1.add(&apos;1&apos;)#重复元素不会被添加print(s1)s2=set([&apos;张三&apos;,&apos;李四&apos;,&apos;王五&apos;,])s3=set([&apos;张三&apos;,&apos;李四&apos;])print(s2)s4=s2.difference(s3)#求差集，s2和s3不一样的元素，print(s4)s2.difference_update(s3) #移除两个集合中都存在的元素,注意此方法操作的原集合 结果： {&apos;1&apos;} {&apos;张三&apos;, &apos;王五&apos;, &apos;李四&apos;} {&apos;王五&apos;} python中使用循环和条件判断python常用两种判断，一种是if语句，一种是while循环 对于if语句，若条件判定为真，那么后面的语句块就会被执行。若条件判定为假，语句块就会被跳过，不会执行。对于多项选择if一起使用的else if语句和else 123456a=1b=10if a&gt;b: print(&quot;a&gt;b&quot;)else print(&quot;a&lt;b&quot;) while循环 一般用于循环执行某些代码块, 12345a=5while a: #只有当a为0时候循环才会终止 a-=1#这句话的意思是a-1然后把a-1的值赋值给a print(a) for循环 for循环多用于遍历某一对象 123list1=[1,2,3,4,5]for i in list1: print(i) 在循环中，我们一般会做一些判断,以改变程序流程。so，Python和其他语言一样提供一下关 键字： break[退出当前循环] countinue;[结束当前的循序，进行下一个数的循环] pass[占位符] return[函数用] exit[退出整个程序] 123456789101112a=7while a: print(a) if a&lt;5:#当a小于5退出当前循环 break a-=1for i in range(1,7): print("number is ",i) if i==3:#只有当i是3的时候会打印hello world,然后程序重新进行循环 print("hello world") continue]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
