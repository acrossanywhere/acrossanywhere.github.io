<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python基础语法学习笔记]]></title>
    <url>%2Fpassages%2FPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Python基础语法一句hello World 引出Python3123#!/usr/bin/python3 print("Hello, World!") Python的优点: 简单易学 丰富的库支持和活跃社区 可扩展性高 用途广 Python2与Python3区别: python2 源码不标准，混乱，重复代码太多 python3 统一 标准，去除重复代码 python2 python3 区别：python2默认编码方式是ascii码 解决方式：在文件的首行：#-- encoding:utf-8 -- python3 默认编码方式utf-8 变量与赋值 变量。顾名思义，可以变化的量，计算机把数据都存在内存中 变量其实就是一块内存地址在操作系统中的别名。 123name=&quot;小明&quot;age=21print(name,age) 结果: (&apos;小明&apos;, 21) Python的内存模型:a=3 #a初始值为3 b=a #b指向的是a指向的地址，通俗来说，在内存中有一个地址，里面值是3，在操作系统引用的时候，可以用别名a， 或者别名b来引用 a=5 #修改a以后b的值不会改变 这里我们用python内置函数 id查看变量的内存地址 1234567#!/usr/bin/pythona=3print(&quot;a id &quot;,id(a),a)b=aprint(&quot;b id &quot;,id(b),b)a=5print(&quot;a id &quot;,id(a),a) 结果： (&apos;a id &apos;, 38792248, 3) (&apos;b id &apos;, 38792248, 3) (&apos;a id &apos;, 38792200, 5) 可以看出变量a和变量b是指向同一个地址，别名a指向5，而5又在其他内存区域，所以最后打印a指向的地址发生了变化 Python的数据类型Python支持四种不同的数值类型： •int（符号整数）：通常被称为是整数或整数，没有小数点的正或负整数。 •long（长整数）：或渴望，无限大小的整数，这样写整数和一个大写或小写的L。 •float（浮点实际值）：彩车，代表实数，小数除以整数部分和小数部分的书面。花车也可能是在科学记数法与E或指示的10次方é（2.5e2= 2.5×102=250） 整型int类型的范围: 32操作系统上:232-1 64操作系统上:264-1 在3.5中init长度理论上是无限的 123456789101112131415161718#int,float类型的一些内部功能age=18.000print(age.__abs__())#求绝对值print(age.__add__(10))#加10print(age.__eq__(19))#对比age是否等于19 返回值为True或者Falseresult=age.__init__()#将age转为int,会生成一个新对象，类型为intprint(type(age),result)#打印转换后结果print(age.__divmod__(4))#返回商和余数age=18#现在把age修改为int类型print(age.bit_length())#显示age二进制有几位,此功能只支持iniprint(age.__abs__())#求绝对值print(age.__add__(10))#加10print(age.__eq__(19))#对比age是否等于19 返回值为True或者Falseresult=age.__float__()#将age转为float,会生成一个新对象，类型为floatprint(type(age),result)#打印转换后结果print(age.__divmod__(4))#返回商和余数 字符串python中字符串本质上字符列表: 字符串操作: 移除空白 strip 分割 plit 计算长度 len 索引 index 切片 obj[1:],obj[1:10] 字符串需要注意到地方 万恶的 +号 因为字符数组+一个元素,开辟一块新空间 复制一份数组 把新元素添加进去所以效率低,耗费内存 1234s='string'print(id(s))s2=s+'a'#新开辟一块内存给s2,然后再列表尾部添加字符'a' 当数据量大时，非常占用资源print(id(s2)) 布尔 元组 元祖基本操作（元祖中的元素不可修改）元祖的元素的元素可以修改 1234t2=(11,22,&#123;'k1':'1'&#125;)print(t2)t2[2]['k1']='2'print(t2) 结果: (11, 22, {&apos;k1&apos;: &apos;1&apos;}) (11, 22, {&apos;k1&apos;: &apos;2&apos;}) 列表 列表拥有的操作方法：append 增加 count 统计 extend 扩展 index 索引 insert 插入 pop 弹出 remove 删除指定元素 reverse 反转 sort 排序 切片 split 123456789101112131415161718list_int=[1,2,3,4,5]name_list=["zhangsan","lisi","wangwu","wangwu"]print(name_list.index("wangwu")) #索引wangwu在哪个位置name_list.append("zhaoliu")#把zhaoliu添加到列表尾部print(name_list)print(name_list.count("zhaoliu"))#统计有几个叫wangwu的name_list.insert(1,"wangdachui") #在索引为1的后面插入一个叫wangdachui的print(name_list)print(name_list.pop()) #弹出当前尾部元素name_list.remove("wangdachui")#会删除列表所有的指定元素name_list.remove("wangwu")#列表中的两个wangwu都会被删除print(name_list)name_list.reverse()#反转列表顺序print(name_list)name_list.sort()#按照aissc码进行排序print(name_list)name_list.extend(list_int)#添加另一个列表到name_listprint(name_list) 字典字典支持的方法:键值对 d[key:&apos;value&apos;] 新增 d[key:&apos;value&apos;] 删除 del d[key] 所有的键 keys 所有的值 values 所有的键值对 items 特殊数据对象”集合” #python中使用循环和条件判断 python常用两种判断，一种是if语句，一种是while循环 对于if语句，若条件判定为真，那么后面的语句块就会被执行。若条件判定为假，语句块就会被跳过，不会执行。对于多项选择if一起使用的else if语句和else 123456a=1b=10if a&gt;b: print(&quot;a&gt;b&quot;)else print(&quot;a&lt;b&quot;) while循环 一般用于循环执行某些代码块, 12345a=5while a: #只有当a为0时候循环才会终止 a-=1#这句话的意思是a-1然后把a-1的值赋值给a print(a) for循环 for循环多用于遍历某一对象 123list1=[1,2,3,4,5]for i in list1: print(i) 在循环中，我们一般会做一些判断,以改变程序流程。so，Python和其他语言一样提供一下关键字：break[退出当前循环];countinue;pass[占位符],return[函数用];exit[退出整个程序] while a python 类 python 函数 python 模块 python 文件 python socket python exception]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpassages%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
