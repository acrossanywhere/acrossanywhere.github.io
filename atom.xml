<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命不息梦想不止</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-12T03:33:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AcrossanyWhere</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础语法学习笔记</title>
    <link href="http://yoursite.com/passages/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/passages/Python基础学习笔记/</id>
    <published>2019-03-10T05:46:19.000Z</published>
    <updated>2019-03-12T03:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><p>一句hello World 引出Python3<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>print(<span class="hljs-string">"Hello, World!"</span>)<br></code></pre></td></tr></table></figure></p><ul><li>Python的优点:<br>   简单易学<br>   丰富的库支持和活跃社区<br>   可扩展性高<br>   用途广</li></ul><ul><li>Python2与Python3区别:<br>  python2 源码不标准，混乱，重复代码太多<br>  python3 统一 标准，去除重复代码<br>  python2 python3 区别：python2默认编码方式是ascii码<br>  解决方式：在文件的首行：#-<em>- encoding:utf-8 -</em>-<br>  python3 默认编码方式utf-8</li></ul><ul><li><p>变量与赋值</p><p>  变量。顾名思义，可以变化的量，计算机把数据都存在内存中<br>  变量其实就是一块内存地址在操作系统中的别名。</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">name=&quot;小明&quot;<br>age=21<br>print(name,age)<br></code></pre></td></tr></table></figure><pre><code>结果:    (&apos;小明&apos;, 21)</code></pre><ul><li>Python的内存模型:<pre><code>a=3 #a初始值为3b=a #b指向的是a指向的地址，通俗来说，在内存中有一个地址，里面值是3，在操作系统引用的时候，可以用别名a，或者别名b来引用a=5 #修改a以后b的值不会改变这里我们用python内置函数 id查看变量的内存地址</code></pre></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#!/usr/bin/python<br>a=3<br>print(&quot;a id &quot;,id(a),a)<br>b=a<br>print(&quot;b id &quot;,id(b),b)<br>a=5<br>print(&quot;a id &quot;,id(a),a)<br></code></pre></td></tr></table></figure><pre><code>结果：    (&apos;a id &apos;, 38792248, 3)    (&apos;b id &apos;, 38792248, 3)    (&apos;a id &apos;, 38792200, 5)可以看出变量a和变量b是指向同一个地址，别名a指向5，而5又在其他内存区域，所以最后打印a指向的地址发生了变化</code></pre><ul><li>Python的数据类型<br>Python支持四种不同的数值类型：</li></ul><p>•int（符号整数）：通常被称为是整数或整数，没有小数点的正或负整数。</p><p>•long（长整数）：或渴望，无限大小的整数，这样写整数和一个大写或小写的L。</p><p>•float（浮点实际值）：彩车，代表实数，小数除以整数部分和小数部分的书面。花车也可能是在科学记数法与E或指示的10次方é（2.5e2= 2.5×102=250）</p><ol><li>整型<br>int类型的范围:<br> 32操作系统上:2<strong>32-1<br> 64操作系统上:2</strong>64-1<br> 在3.5中init长度理论上是无限的</li></ol><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#int,float类型的一些内部功能</span><br>age=<span class="hljs-number">18.000</span><br><br>print(age.__abs__())<span class="hljs-comment">#求绝对值</span><br>print(age.__add__(<span class="hljs-number">10</span>))<span class="hljs-comment">#加10</span><br>print(age.__eq__(<span class="hljs-number">19</span>))<span class="hljs-comment">#对比age是否等于19 返回值为True或者False</span><br>result=age.__init__()<span class="hljs-comment">#将age转为int,会生成一个新对象，类型为int</span><br>print(type(age),result)<span class="hljs-comment">#打印转换后结果</span><br>print(age.__divmod__(<span class="hljs-number">4</span>))<span class="hljs-comment">#返回商和余数</span><br><br>age=<span class="hljs-number">18</span><span class="hljs-comment">#现在把age修改为int类型</span><br>print(age.bit_length())<span class="hljs-comment">#显示age二进制有几位,此功能只支持ini</span><br>print(age.__abs__())<span class="hljs-comment">#求绝对值</span><br>print(age.__add__(<span class="hljs-number">10</span>))<span class="hljs-comment">#加10</span><br>print(age.__eq__(<span class="hljs-number">19</span>))<span class="hljs-comment">#对比age是否等于19 返回值为True或者False</span><br>result=age.__float__()<span class="hljs-comment">#将age转为float,会生成一个新对象，类型为float</span><br>print(type(age),result)<span class="hljs-comment">#打印转换后结果</span><br>print(age.__divmod__(<span class="hljs-number">4</span>))<span class="hljs-comment">#返回商和余数</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>字符串<br>python中字符串本质上字符列表:</p><pre><code>字符串操作:移除空白 strip分割     plit计算长度 len索引     index切片     obj[1:],obj[1:10]</code></pre><p> 字符串需要注意到地方 万恶的 +号<br> 因为字符数组+一个元素,开辟一块新空间 复制一份数组 把新元素添加进去所以效率低,耗费内存</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-string">'string'</span><br>print(id(s))<br>s2=s+<span class="hljs-string">'a'</span><span class="hljs-comment">#新开辟一块内存给s2,然后再列表尾部添加字符'a' 当数据量大时，非常占用资源</span><br>print(id(s2))<br></code></pre></td></tr></table></figure></li><li><p>布尔</p></li><li><p>元组</p></li></ol><ul><li><p>元祖基本操作（元祖中的元素不可修改）元祖的元素的元素可以修改</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">t2=(<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,&#123;<span class="hljs-string">'k1'</span>:<span class="hljs-string">'1'</span>&#125;)<br>print(t2)<br>t2[<span class="hljs-number">2</span>][<span class="hljs-string">'k1'</span>]=<span class="hljs-string">'2'</span><br>print(t2)<br></code></pre></td></tr></table></figure><p>  结果:</p><pre><code>(11, 22, {&apos;k1&apos;: &apos;1&apos;})(11, 22, {&apos;k1&apos;: &apos;2&apos;})</code></pre></li></ul><ol start="5"><li>列表</li></ol><ul><li>列表拥有的操作方法：<pre><code>append 增加count  统计extend 扩展index  索引insert 插入pop    弹出remove 删除指定元素reverse 反转sort   排序切片 split</code></pre></li></ul><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">list_int=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>name_list=[<span class="hljs-string">"zhangsan"</span>,<span class="hljs-string">"lisi"</span>,<span class="hljs-string">"wangwu"</span>,<span class="hljs-string">"wangwu"</span>]<br>print(name_list.index(<span class="hljs-string">"wangwu"</span>)) <span class="hljs-comment">#索引wangwu在哪个位置</span><br>name_list.append(<span class="hljs-string">"zhaoliu"</span>)<span class="hljs-comment">#把zhaoliu添加到列表尾部</span><br>print(name_list)<br>print(name_list.count(<span class="hljs-string">"zhaoliu"</span>))<span class="hljs-comment">#统计有几个叫wangwu的</span><br>name_list.insert(<span class="hljs-number">1</span>,<span class="hljs-string">"wangdachui"</span>) <span class="hljs-comment">#在索引为1的后面插入一个叫wangdachui的</span><br>print(name_list)<br>print(name_list.pop()) <span class="hljs-comment">#弹出当前尾部元素</span><br>name_list.remove(<span class="hljs-string">"wangdachui"</span>)<span class="hljs-comment">#会删除列表所有的指定元素</span><br>name_list.remove(<span class="hljs-string">"wangwu"</span>)<span class="hljs-comment">#列表中的两个wangwu都会被删除</span><br>print(name_list)<br>name_list.reverse()<span class="hljs-comment">#反转列表顺序</span><br>print(name_list)<br>name_list.sort()<span class="hljs-comment">#按照aissc码进行排序</span><br>print(name_list)<br>name_list.extend(list_int)<span class="hljs-comment">#添加另一个列表到name_list</span><br>print(name_list)<br></code></pre></td></tr></table></figure><ol start="6"><li>字典<br>字典支持的方法:<pre><code>键值对 d[key:&apos;value&apos;]新增   d[key:&apos;value&apos;]删除   del d[key]所有的键 keys所有的值 values所有的键值对 items</code></pre></li></ol><ol start="8"><li>特殊数据对象”集合”</li></ol><p>#python中使用循环和条件判断</p><p>python常用两种判断，一种是if语句，一种是while循环</p><p>对于if语句，若条件判定为真，那么后面的语句块就会被执行。若条件判定为假，语句块就会被跳过，不会执行。对于多项选择if一起使用的else</p><p>if语句和else</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">a=1<br>b=10<br>if a&gt;b:<br>    print(&quot;a&gt;b&quot;)<br>else<br>    print(&quot;a&lt;b&quot;)<br></code></pre></td></tr></table></figure><p>while循环<br>    一般用于循环执行某些代码块,</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">a=5<br>while a: #只有当a为0时候循环才会终止<br>    <br>    a-=1#这句话的意思是a-1然后把a-1的值赋值给a<br>    print(a)<br></code></pre></td></tr></table></figure><p>for循环<br>    for循环多用于遍历某一对象</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">list1=[1,2,3,4,5]<br>for i in list1:<br>    print(i)<br></code></pre></td></tr></table></figure><p>在循环中，我们一般会做一些判断,以改变程序流程。so，Python和其他语言一样提供一下关<br>键字：<br>break[退出当前循环];countinue;pass[占位符],return[函数用];exit[退出整个程序]</p><p>while a</p><p>python 类</p><p>python 函数</p><p>python 模块</p><p>python 文件</p><p>python socket</p><p>python exception</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础语法&quot;&gt;&lt;a href=&quot;#Python基础语法&quot; class=&quot;headerlink&quot; title=&quot;Python基础语法&quot;&gt;&lt;/a&gt;Python基础语法&lt;/h1&gt;&lt;p&gt;一句hello World 引出Python3&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/passages/hello-world/"/>
    <id>http://yoursite.com/passages/hello-world/</id>
    <published>2019-03-09T14:23:06.170Z</published>
    <updated>2019-03-09T14:23:06.170Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
