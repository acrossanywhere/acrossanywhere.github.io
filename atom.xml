<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命不息梦想不止</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-14T05:19:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AcrossanyWhere</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python装饰器原理</title>
    <link href="http://yoursite.com/passages/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/passages/Python装饰器原理/</id>
    <published>2019-03-14T12:27:05.000Z</published>
    <updated>2019-03-14T05:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>什么是装饰器:</p><pre><code>python装饰器本质上就是一个函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外的功能，装饰器的返回值也是一个函数对象（函数的指针）。装饰器函数的外部函数传入我要装饰的函数名字，返回经过修饰后函数的名字；内层函数（闭包）负责修饰被修饰函数。从上面这段描述中我们需要记住装饰器的几点属性，以便后面能更好的理解：</code></pre><p>  　　　　实质： 是一个函数</p><p>  　　　　参数：是你要装饰的函数名（并非函数调用）</p><p>  　　　　返回：是装饰完的函数名（也非函数调用）</p><p>  　　　　作用：为已经存在的对象添加额外的功能</p><p>  　　　　特点：不需要对对象做任何的代码上的变动</p></li></ul><ul><li><p>装饰器是用来干嘛的？</p><pre><code>在调用一个函数前先调用两一个函数比如某电商网站，除了首页，点击其他页面都需要先登录才能查看，装饰器就可以在用户点击其他页面时调用登陆函数</code></pre></li></ul><p>#未使用装饰器版本的代码</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(fun)</span>:</span><br>    print(<span class="hljs-string">"这里是验证函数"</span>)<span class="hljs-comment">#这里可以加入验证代码,</span><br>    <span class="hljs-keyword">return</span> fun<span class="hljs-comment">#验证通过返回正确跳转页面,否则提示错误</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page_account</span><span class="hljs-params">()</span>:</span><br>    print(<span class="hljs-string">"page_account"</span>)<br>page_account=login(page_account)<br>page_account()<br><span class="hljs-string">'''这里把page_account的函数地址传递给login。这样做点击page_account<br>    页面时候会先调用login函数进行判断,#这样写太繁琐,而且修改原来代码'''</span><br></code></pre></td></tr></table></figure><p>#使用装饰器实现的代码</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(fun)</span>:</span><br>    print(<span class="hljs-string">"这里是验证函数"</span>) <span class="hljs-comment">#这里可以加入验证代码,</span><br>    <span class="hljs-keyword">return</span> fun<span class="hljs-comment">#验证通过返回正确跳转页面,否则提示错误</span><br><span class="hljs-meta">@login</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page_account</span><span class="hljs-params">()</span>:</span><br>    print(<span class="hljs-string">"这里用的是装饰器写法,page_account"</span>)<br>page_account()<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是装饰器:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python装饰器本质上就是一个函数，它可以让其他函数在不需要做任何代码变动
的前提下增加额外的功能，装饰器的返回值也是一个函数对象（函数的指针）。
装饰器函数的外部函数传入我要装饰的函数名字，返回经过修饰后函
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python迭代器</title>
    <link href="http://yoursite.com/passages/Python%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/passages/Python迭代器/</id>
    <published>2019-03-14T10:55:50.000Z</published>
    <updated>2019-03-14T04:20:25.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>什么是迭代器？</p><pre><code>迭代是Python最强大的功能之一，是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。迭代器有两个基本的方法：iter() 和 next()。字符串，列表或元组对象都可用于创建迭代器 </code></pre></li></ul><ul><li><p>迭代器解决了什么问题？</p><pre><code>当读取一个特别文件时，如一个2G日志，假设硬盘IO每秒30M使用文件的方式读取该文件需要大概一分钟，才能完全将该文件加载到内存。通常我们查看日志也就看最新的几行或者几百行。这样一来打开速度慢。二来太浪费内存,如果文件超级大，可能会卡迭代器很好的解决了这个问题。迭代器可以读取一行显示一行</code></pre></li></ul><p>如何定义迭代器，如下:<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>names=iter([<span class="hljs-string">'A'</span>,<span class="hljs-string">'B'</span>,<span class="hljs-string">'C'</span>,<span class="hljs-string">'D'</span>]) <span class="hljs-comment">#iter关键字生成迭代器</span><br><br><span class="hljs-comment">#print(names[1]) #直接用索引访问会报错</span><br>print(names.__next__()) <span class="hljs-comment">#访问迭代器中的元素</span><br>print(names.__next__()) <span class="hljs-comment">#访问迭代器中的元素</span><br>print(names.__next__()) <span class="hljs-comment">#访问迭代器中的元素</span><br>print(names.__next__()) <span class="hljs-comment">#访问迭代器中的元素</span><br>print(names.__next__()) <span class="hljs-comment">#当迭代器中的元素以及访问完，最后会报StopIteration错误</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是迭代器？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;迭代是Python最强大的功能之一，是访问集合元素的一种方式。

迭代器是一个可以记住遍历的位置的对象。

迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。

迭代器有
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python中使用函数</title>
    <link href="http://yoursite.com/passages/Python%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/passages/Python中使用函数/</id>
    <published>2019-03-13T16:19:04.000Z</published>
    <updated>2019-03-14T02:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，<br>比如print()。但你也可以自己创建函数，这被叫做用户自定义函数</p><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><pre><code>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。函数内容以冒号起始，并且缩进。return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</code></pre><ul><li><p>函数的返回值</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun1</span><span class="hljs-params">(a)</span>:</span><br>     a+=<span class="hljs-number">1</span><br>     <span class="hljs-keyword">return</span> a <span class="hljs-comment">#这里返回a+1的结果</span><br>print(fun1(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure></li><li><p>默认参数</p></li></ul><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show1</span><span class="hljs-params">(a1,a2=<span class="hljs-number">999</span>,a3=<span class="hljs-number">476</span>)</span>:</span> <span class="hljs-comment">#默认参数必须放最后</span><br>    print(a1,a2,a3)<br>show1(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>)<span class="hljs-comment">#只传递两个参数，默认参数a3也会打印</span><br>show1(<span class="hljs-number">111</span>,<span class="hljs-number">22</span>,<span class="hljs-number">333</span>)<span class="hljs-comment">#给默认参数传递新值，这样会修改默认参数值</span><br></code></pre></td></tr></table></figure><ul><li><p>指定参数</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show2</span><span class="hljs-params">(a1,a2)</span>:</span><span class="hljs-comment">#默认传参数按顺序来</span><br>    print(a1,a2)<br>show2(<span class="hljs-number">999</span>,<span class="hljs-number">123</span>)<span class="hljs-comment">#不指定参数</span><br>show2(a2=<span class="hljs-number">999</span>,a1=<span class="hljs-number">123</span>)<span class="hljs-comment">#指定参数</span><br></code></pre></td></tr></table></figure></li><li><p>动态参数</p></li></ul><p>1 <em>args 用来将参数打包成tuple给函数体调用，参数个数不受限制，</em>args接收元组作为位置参数<br>2 <em>args 将参数打包成字典<br>3 注意点：参数arg、</em>args、<strong>kwargs三个参数的位置必须是一定的。必须是(arg,*args,</strong>kwargs)<br>这个顺序，否则程序会报错</p><p><em>args 用来将参数打包成tuple给函数体调用，参数个数不受限制，</em>args接收元组作为位置参数<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将参数打包成元组</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show1</span><span class="hljs-params">(*args)</span>:</span><br>    print(args,type(args))<br>show1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">#args 将参数打包成字典</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show2</span><span class="hljs-params">(**args)</span>:</span><br>    print(args,type(args))<br>show2(a=<span class="hljs-number">123</span>,b=<span class="hljs-number">456</span>,c=<span class="hljs-number">789</span>)<br></code></pre></td></tr></table></figure></p><pre><code>结果:    (1, 2, 3) &lt;class &apos;tuple&apos;&gt;    {&apos;a&apos;: 123, &apos;b&apos;: 456, &apos;c&apos;: 789} &lt;class &apos;dict&apos;&gt;</code></pre><ul><li><p>匿名函数:<br>  当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。<br>  关键字lambda表示匿名函数<br>  匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。</p><p>  用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是<br>  一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p></li></ul><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun1</span><span class="hljs-params">(a)</span>:</span><br>    a+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> a<br>print(fun1(<span class="hljs-number">5</span>))<br><br><span class="hljs-comment">#lambda表达式 实现相同的效果</span><br><br>fun2=<span class="hljs-keyword">lambda</span>  a: a+<span class="hljs-number">1</span> <span class="hljs-comment">#这里a相当于形参，冒号前面是函数体，冒号后面是函数执行的代码</span><br><br>print(fun2(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。&lt;br&gt;函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，&lt;br&gt;比如print()。但你也可以自己创建函数，这被叫做用户自定义函数&lt;/p&gt;
&lt;p&gt;你可以定义一个由自己想要
      
    
    </summary>
    
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python可命名元祖</title>
    <link href="http://yoursite.com/passages/Python%E5%8F%AF%E5%91%BD%E5%90%8D%E5%85%83%E7%BB%84/"/>
    <id>http://yoursite.com/passages/Python可命名元组/</id>
    <published>2019-03-12T15:54:17.000Z</published>
    <updated>2019-03-12T15:57:46.971Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码吧</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>import  collections<br>#可命名元组，即给元组的元素起名字。用名称去访问元组中的元素<br>MytupleCalss=collections.namedtuple(&quot;MytupleCalss&quot;,[&apos;x&apos;,&apos;y&apos;,&apos;z&apos;])<br><br>obj=MytupleCalss(11,22,33)<br>print(obj.x,obj.y,obj.z)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接上代码吧&lt;/p&gt;
&lt;figure class=&quot;hljs highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python深浅拷贝</title>
    <link href="http://yoursite.com/passages/python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/passages/python深浅拷贝/</id>
    <published>2019-03-12T15:04:40.000Z</published>
    <updated>2019-03-12T07:42:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python当中对于拷贝，分为两种类型。一种是数字和字符串，另一种就是列表、元组、字典等其他类型了</p><p>对于字符串，和数字,来说，深拷贝和浅拷贝永远都是用的同一个内存中的值，它们指向的地址是相同的</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">n1=&#123;<span class="hljs-string">"k1"</span>:<span class="hljs-string">"1"</span>,<span class="hljs-string">"k2"</span>:<span class="hljs-number">123</span>,<span class="hljs-string">"k3"</span>:[<span class="hljs-string">"len"</span>,<span class="hljs-number">444</span>]&#125;<br>n2=n1<span class="hljs-comment">#将n1赋值给n2</span><br><span class="hljs-keyword">if</span> (id(n1))==(id(n2)):<br>    print(<span class="hljs-string">"n1的地址和n2相同"</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"n1的地址和n2不同"</span>)<br><br>n3=copy.copy(n1)<span class="hljs-comment">#浅拷贝创建新对象。对象只拷原来对象第一层的数据</span><br><span class="hljs-keyword">if</span> (id(n3))==(id(n1)):<br>    print(<span class="hljs-string">"n1和n3地址相同"</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"n1和n3地址不同"</span>)<br>print(n1,<span class="hljs-string">'\n'</span>,n3) <span class="hljs-comment">#n3 和n1 是两个不同的对象。ID不一样,但指向的值是一样的</span><br><span class="hljs-keyword">if</span> (id(n1[<span class="hljs-string">"k3"</span>]))==(id(n3[<span class="hljs-string">"k3"</span>])): <span class="hljs-comment">#测试一下n1和n3指向的数据地址是否一致</span><br>    print(<span class="hljs-string">"n1的k3和n3的k3 指向的地址相同"</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"n1的k3和n3的k3 指向的地址不同"</span>)<br><br>n4=copy.deepcopy(n1)<br><span class="hljs-keyword">if</span> (id(n4))==(id(n1)): <span class="hljs-comment">#无论嵌套多少层，深拷贝会完整复制一份新的数据。</span><br>    print(<span class="hljs-string">"n4和n1地址相同"</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"n4和n1地址不同"</span>)<br><br><span class="hljs-keyword">if</span> (id(n1[<span class="hljs-string">"k3"</span>]))==(id(n4[<span class="hljs-string">"k3"</span>])): <span class="hljs-comment">#测试一下n1和n4指向的数据地址是否一致</span><br>    print(<span class="hljs-string">"n1的k3和 n4的k3指向的地址相同"</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"n1的k3和 n4的k3指向的地址不同"</span>)<br></code></pre></td></tr></table></figure><pre><code>结果：    n1的地址和n2相同    n1和n3地址不同    {&apos;k1&apos;: &apos;1&apos;, &apos;k2&apos;: 123, &apos;k3&apos;: [&apos;len&apos;, 444]}     {&apos;k1&apos;: &apos;1&apos;, &apos;k2&apos;: 123, &apos;k3&apos;: [&apos;len&apos;, 444]}    n1的k3和n3的k3 指向的地址相同    n4和n1地址不同    n1的k3和 n4的k3指向的地址不同</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python当中对于拷贝，分为两种类型。一种是数字和字符串，另一种就是列表、元组、字典等其他类型了&lt;/p&gt;
&lt;p&gt;对于字符串，和数字,来说，深拷贝和浅拷贝永远都是用的同一个内存中的值，它们指向的地址是相同的&lt;/p&gt;
&lt;figure class=&quot;hljs highlight
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python基础语法学习笔记</title>
    <link href="http://yoursite.com/passages/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/passages/Python基础学习笔记/</id>
    <published>2019-03-10T05:46:19.000Z</published>
    <updated>2019-03-12T06:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><p>一句hello World 引出Python3<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>print(<span class="hljs-string">"Hello, World!"</span>)<br></code></pre></td></tr></table></figure></p><ul><li>Python的优点:<br>   简单易学<br>   丰富的库支持和活跃社区<br>   可扩展性高<br>   用途广</li></ul><ul><li>Python2与Python3区别:<br>  python2 源码不标准，混乱，重复代码太多<br>  python3 统一 标准，去除重复代码<br>  python2 python3 区别：python2默认编码方式是ascii码<br>  解决方式：在文件的首行：#-<em>- encoding:utf-8 -</em>-<br>  python3 默认编码方式utf-8</li></ul><ul><li><p>变量与赋值</p><p>  变量。顾名思义，可以变化的量，计算机把数据都存在内存中<br>  变量其实就是一块内存地址在操作系统中的别名。</p></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">name=&quot;小明&quot;<br>age=21<br>print(name,age)<br></code></pre></td></tr></table></figure><pre><code>结果:    (&apos;小明&apos;, 21)</code></pre><ul><li>Python的内存模型:<pre><code>a=3 #a初始值为3b=a #b指向的是a指向的地址，通俗来说，在内存中有一个地址，里面值是3，在操作系统引用的时候，可以用别名a，或者别名b来引用a=5 #修改a以后b的值不会改变这里我们用python内置函数 id查看变量的内存地址</code></pre></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#!/usr/bin/python<br>a=3<br>print(&quot;a id &quot;,id(a),a)<br>b=a<br>print(&quot;b id &quot;,id(b),b)<br>a=5<br>print(&quot;a id &quot;,id(a),a)<br></code></pre></td></tr></table></figure><pre><code>结果：    (&apos;a id &apos;, 38792248, 3)    (&apos;b id &apos;, 38792248, 3)    (&apos;a id &apos;, 38792200, 5)可以看出变量a和变量b是指向同一个地址，别名a指向5，而5又在其他内存区域，所以最后打印a指向的地址发生了变化</code></pre><ul><li>Python的数据类型<br>Python支持常用的数值类型：</li></ul><p>•int（符号整数）：通常被称为是整数或整数，没有小数点的正或负整数。</p><p>•float（浮点实际值）：彩车，代表实数，小数除以整数部分和小数部分的书面。花车也可能是在科学记数法与E或指示的10次方é（2.5e2= 2.5×102=250）</p><p>•string (字符串):</p><p>•list (列表）：一次性存放多个相同类型的值，类似于C语言中数组</p><p>•tuple (元组）：元组与列表类似，不同之处在于元组的元素不能修</p><p>•bool (字典）：字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</p><ol><li>整型<br>int类型的范围:<br> 32操作系统上:2<strong>32-1<br> 64操作系统上:2</strong>64-1<br> 在3.5中init长度理论上是无限的</li></ol><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#int,float类型的一些内部功能</span><br>age=<span class="hljs-number">18.000</span><br><br>print(age.__abs__())<span class="hljs-comment">#求绝对值</span><br>print(age.__add__(<span class="hljs-number">10</span>))<span class="hljs-comment">#加10</span><br>print(age.__eq__(<span class="hljs-number">19</span>))<span class="hljs-comment">#对比age是否等于19 返回值为True或者False</span><br>result=age.__init__()<span class="hljs-comment">#将age转为int,会生成一个新对象，类型为int</span><br>print(type(age),result)<span class="hljs-comment">#打印转换后结果</span><br>print(age.__divmod__(<span class="hljs-number">4</span>))<span class="hljs-comment">#返回商和余数</span><br><br>age=<span class="hljs-number">18</span><span class="hljs-comment">#现在把age修改为int类型</span><br>print(age.bit_length())<span class="hljs-comment">#显示age二进制有几位,此功能只支持ini</span><br>print(age.__abs__())<span class="hljs-comment">#求绝对值</span><br>print(age.__add__(<span class="hljs-number">10</span>))<span class="hljs-comment">#加10</span><br>print(age.__eq__(<span class="hljs-number">19</span>))<span class="hljs-comment">#对比age是否等于19 返回值为True或者False</span><br>result=age.__float__()<span class="hljs-comment">#将age转为float,会生成一个新对象，类型为float</span><br>print(type(age),result)<span class="hljs-comment">#打印转换后结果</span><br>print(age.__divmod__(<span class="hljs-number">4</span>))<span class="hljs-comment">#返回商和余数</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>字符串<br>python中字符串本质上字符列表:</p><pre><code>字符串操作:移除空白 strip分割     split计算长度 len索引     index切片     obj[1:],obj[1:10]</code></pre><p> 字符串需要注意到地方 万恶的 +号<br> 因为字符数组+一个元素,开辟一块新空间 复制一份数组 把新元素添加进去所以效率低,耗费内存</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-string">'string'</span><br>print(id(s))<br>s2=s+<span class="hljs-string">'a'</span><span class="hljs-comment">#新开辟一块内存给s2,然后再列表尾部添加字符'a' 当数据量大时，非常占用资源</span><br>print(id(s2))<br></code></pre></td></tr></table></figure></li><li><p>列表</p></li></ol><ul><li>列表拥有的操作方法：<pre><code>append 增加count  统计extend 扩展index  索引insert 插入pop    弹出remove 删除指定元素reverse 反转sort   排序split  切片</code></pre></li></ul><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">list_int=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>name_list=[<span class="hljs-string">"zhangsan"</span>,<span class="hljs-string">"lisi"</span>,<span class="hljs-string">"wangwu"</span>,<span class="hljs-string">"wangwu"</span>]<br>print(name_list.index(<span class="hljs-string">"wangwu"</span>)) <span class="hljs-comment">#索引wangwu在哪个位置</span><br>name_list.append(<span class="hljs-string">"zhaoliu"</span>)<span class="hljs-comment">#把zhaoliu添加到列表尾部</span><br>print(name_list)<br>print(name_list.count(<span class="hljs-string">"zhaoliu"</span>))<span class="hljs-comment">#统计有几个叫wangwu的</span><br>name_list.insert(<span class="hljs-number">1</span>,<span class="hljs-string">"wangdachui"</span>) <span class="hljs-comment">#在索引为1的后面插入一个叫wangdachui的</span><br>print(name_list)<br>print(name_list.pop()) <span class="hljs-comment">#弹出当前尾部元素</span><br>name_list.remove(<span class="hljs-string">"wangdachui"</span>)<span class="hljs-comment">#删除列表指定元素</span><br>name_list.remove(<span class="hljs-string">"wangwu"</span>)<span class="hljs-comment">#列表中的两个wangwu都会被删除</span><br>print(name_list)<br>name_list.reverse()<span class="hljs-comment">#反转列表顺序</span><br>print(name_list)<br>name_list.sort()<span class="hljs-comment">#按照aissc码进行排序</span><br>print(name_list)<br>name_list.extend(list_int)<span class="hljs-comment">#添加另一个列表到name_list</span><br>print(name_list)<br></code></pre></td></tr></table></figure><ol start="4"><li>元组</li></ol><ul><li><p>元祖的操作和列表基本上相同，但是元组是只读的（元祖中的元素不可修改）；元祖的元素的元素可以修改</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">t2=(<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,&#123;<span class="hljs-string">'k1'</span>:<span class="hljs-string">'1'</span>&#125;)<br>print(t2)<br>t2[<span class="hljs-number">2</span>][<span class="hljs-string">'k1'</span>]=<span class="hljs-string">'2'</span><br>print(t2)<br></code></pre></td></tr></table></figure><p>  结果:</p><pre><code>(11, 22, {&apos;k1&apos;: &apos;1&apos;})(11, 22, {&apos;k1&apos;: &apos;2&apos;})</code></pre></li></ul><ol start="5"><li>字典</li></ol><ul><li>字典支持的方法:<pre><code>键值对 d[key:&apos;value&apos;]新增   d[key:&apos;value&apos;]删除   del d[key]所有的键 keys所有的值 values所有的键值对 items</code></pre></li></ul><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d1=dict(k1=<span class="hljs-string">'1'</span>,k2=<span class="hljs-string">'2'</span>)<br>d2=d1.fromkeys([<span class="hljs-string">'k1'</span>,<span class="hljs-string">'k2'</span>],<span class="hljs-string">'1'</span>)<span class="hljs-comment">#以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值生成新字典</span><br>print(d2)<br>print(d1.get(<span class="hljs-string">'k3'</span>,<span class="hljs-string">'hello'</span>))<span class="hljs-comment">#get方法，如果k3不存在，则设置k3为 hello</span><br>print(d1.items())<span class="hljs-comment">#打印所有的key和values</span><br></code></pre></td></tr></table></figure><pre><code>结果:    {&apos;k1&apos;: &apos;1&apos;, &apos;k2&apos;: &apos;1&apos;}    hello    dict_items([(&apos;k1&apos;, &apos;1&apos;), (&apos;k2&apos;, &apos;2&apos;)])</code></pre><ol start="6"><li><p>特殊数据对象”集合”<br>集合（set）是一个无序的不重复元素序列</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">s1=set()#创建一个集合对象<br>s1.add(&apos;1&apos;)<br>s1.add(&apos;1&apos;)#重复元素不会被添加<br>print(s1)<br>s2=set([&apos;张三&apos;,&apos;李四&apos;,&apos;王五&apos;,])<br>s3=set([&apos;张三&apos;,&apos;李四&apos;])<br>print(s2)<br>s4=s2.difference(s3)#求差集，s2和s3不一样的元素，<br>print(s4)<br>s2.difference_update(s3) #移除两个集合中都存在的元素,注意此方法操作的原集合<br></code></pre></td></tr></table></figure><p> 结果：</p><pre><code>{&apos;1&apos;}{&apos;张三&apos;, &apos;王五&apos;, &apos;李四&apos;}{&apos;王五&apos;}</code></pre></li></ol><h1 id="python中使用循环和条件判断"><a href="#python中使用循环和条件判断" class="headerlink" title="python中使用循环和条件判断"></a>python中使用循环和条件判断</h1><p>python常用两种判断，一种是if语句，一种是while循环</p><p>对于if语句，若条件判定为真，那么后面的语句块就会被执行。若条件判定为假，语句块就会被跳过，不会执行。对于多项选择if一起使用的else</p><p>if语句和else</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">a=1<br>b=10<br>if a&gt;b:<br>    print(&quot;a&gt;b&quot;)<br>else<br>    print(&quot;a&lt;b&quot;)<br></code></pre></td></tr></table></figure><p>while循环<br>    一般用于循环执行某些代码块,</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">a=5<br>while a: #只有当a为0时候循环才会终止<br>    <br>    a-=1#这句话的意思是a-1然后把a-1的值赋值给a<br>    print(a)<br></code></pre></td></tr></table></figure><p>for循环<br>    for循环多用于遍历某一对象</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">list1=[1,2,3,4,5]<br>for i in list1:<br>    print(i)<br></code></pre></td></tr></table></figure><pre><code>在循环中，我们一般会做一些判断,以改变程序流程。so，Python和其他语言一样提供一下关键字：break[退出当前循环]countinue;[结束当前的循序，进行下一个数的循环]pass[占位符]return[函数用]exit[退出整个程序]</code></pre><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">7</span><br><span class="hljs-keyword">while</span> a:<br>    print(a)<br>    <span class="hljs-keyword">if</span> a&lt;<span class="hljs-number">5</span>:<span class="hljs-comment">#当a小于5退出当前循环</span><br>        <span class="hljs-keyword">break</span><br>    a-=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    print(<span class="hljs-string">"number is "</span>,i)<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">3</span>:<span class="hljs-comment">#只有当i是3的时候会打印hello world,然后程序重新进行循环</span><br>        print(<span class="hljs-string">"hello world"</span>)<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础语法&quot;&gt;&lt;a href=&quot;#Python基础语法&quot; class=&quot;headerlink&quot; title=&quot;Python基础语法&quot;&gt;&lt;/a&gt;Python基础语法&lt;/h1&gt;&lt;p&gt;一句hello World 引出Python3&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
